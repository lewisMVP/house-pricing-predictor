import streamlit as st
import pandas as pd
import numpy as np
import joblib  # ho·∫∑c pickle
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# --- Load Model & Data ---
@st.cache_resource
def load_model():
    model = joblib.load("xgb_model.joblib")  # model ƒë√£ train
    return model

@st.cache_data
def load_data():
    df = pd.read_csv("merged_output.csv")  # d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    return df

model = load_model()
df = load_data()

# --- Sidebar: User Input ---  
st.sidebar.title("üîç Nh·∫≠p th√¥ng tin d·ª± ƒëo√°n")  
area = st.sidebar.number_input("Di·ªán t√≠ch (m¬≤)", min_value=10, max_value=1000, value=120)  
rooms = st.sidebar.slider("S·ªë ph√≤ng", 1, 10, 3)  
zipcode = st.sidebar.selectbox("M√£ v√πng (zipcode)", df['zipcode'].unique())  
house_type = st.sidebar.selectbox("Lo·∫°i nh√†", df['house_type'].unique())  
sales_type = st.sidebar.selectbox("Lo·∫°i b√°n", df['sales_type'].unique())  
year_build = st.sidebar.number_input("NƒÉm x√¢y d·ª±ng", min_value=1900, max_value=2025, value=2000)  
sqm_price = st.sidebar.number_input("Gi√°/m¬≤", min_value=0, value=0)  
city = st.sidebar.selectbox("Th√†nh ph·ªë", df['city'].unique())  
region = st.sidebar.selectbox("V√πng", df['region'].unique())  
nom_interest_rate = st.sidebar.number_input("L√£i su·∫•t cho vay (%)", value=0.0)  
dk_ann_infl_rate = st.sidebar.number_input("L·∫°m ph√°t d·ª± ki·∫øn (%)", value=0.0)  
yield_on_mortgage_credit_bonds = st.sidebar.number_input("L·ª£i su·∫•t tr√°i phi·∫øu t√≠n d·ª•ng th·∫ø ch·∫•p (%)", value=0.0)  

# --- D·ª± ƒëo√°n ---  
input_data = pd.DataFrame({
    # Convert datetime to numeric features
    'date': [pd.Timestamp.now().year * 12 + pd.Timestamp.now().month],  # Convert to months since epoch
    'quarter': [pd.Timestamp.now().quarter],
    'house_id': [0],
    'house_type': [house_type],
    'sales_type': [sales_type],
    'year_build': [year_build],
    '%_change_between_offer_and_purchase': [0],
    'no_rooms': [rooms],
    'sqm': [area],
    'sqm_price': [sqm_price],
    'address': [0],  # Convert to numeric placeholder
    'zipcode': [zipcode],
    'city': [city],
    'area': [area],
    'region': [region],
    'nom_interest_rate%': [nom_interest_rate],
    'dk_ann_infl_rate%': [dk_ann_infl_rate],
    'yield_on_mortgage_credit_bonds%': [yield_on_mortgage_credit_bonds],
}).astype({
    'date': 'int32',
    'quarter': 'int32',
    'house_id': 'int32',
    'year_build': 'int32',
    '%_change_between_offer_and_purchase': 'float32',
    'no_rooms': 'int32',
    'sqm': 'float32',
    'sqm_price': 'float32',
    'address': 'int32',
    'zipcode': 'int32',
    'area': 'float32',
    'nom_interest_rate%': 'float32',
    'dk_ann_infl_rate%': 'float32',
    'yield_on_mortgage_credit_bonds%': 'float32'
})

# --- M√£ h√≥a c√°c c·ªôt chu·ªói b·∫±ng LabelEncoder ---
# Kh·ªüi t·∫°o LabelEncoder
le_house_type = LabelEncoder()
le_sales_type = LabelEncoder()
le_city = LabelEncoder()
le_region = LabelEncoder()

# Fit c√°c LabelEncoder v·ªõi d·ªØ li·ªáu t·ª´ `df` (ho·∫∑c d·ªØ li·ªáu t∆∞∆°ng t·ª± m√† b·∫°n c√≥)
le_house_type.fit(df['house_type'])
le_sales_type.fit(df['sales_type'])
le_city.fit(df['city'])
le_region.fit(df['region'])

# M√£ h√≥a c√°c c·ªôt chu·ªói trong input_data
input_data['house_type'] = le_house_type.transform(input_data['house_type'])
input_data['sales_type'] = le_sales_type.transform(input_data['sales_type'])
input_data['city'] = le_city.transform(input_data['city'])
input_data['region'] = le_region.transform(input_data['region'])

# --- D·ª± ƒëo√°n gi√° nh√† ---
predicted_price = model.predict(input_data)[0]

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ --- 
st.title("üè† D·ª± ƒëo√°n gi√° nh√† ·ªü ƒêan M·∫°ch")
st.subheader("Gi√° nh√† d·ª± ƒëo√°n:")
st.success(f"üí∞ {predicted_price:,.0f} DKK")

# --- Th√™m ph·∫ßn validation v√† g·ª£i √Ω gi√° ---
st.subheader("üí° Ph√¢n t√≠ch gi√° v√† g·ª£i √Ω")

# T·∫°o tabs ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
tab1, tab2 = st.tabs(["ƒê√°nh gi√° gi√° d·ª± ƒëo√°n", "Chi ti·∫øt ph√¢n t√≠ch"])

with tab1:
    col1, col2 = st.columns(2)
    
    with col1:
        # T√¨m gi√° trung b√¨nh c·ªßa khu v·ª±c
        area_data = df[df['zipcode'] == zipcode]
        if not area_data.empty and 'purchaseprice' in area_data.columns:
            area_avg_price = area_data['purchaseprice'].mean()
            area_min_price = area_data['purchaseprice'].min()
            area_max_price = area_data['purchaseprice'].max()
            area_count = len(area_data)
            
            st.metric(
                label=f"Gi√° trung b√¨nh khu v·ª±c {zipcode}", 
                value=f"{area_avg_price:,.0f} DKK",
                delta=f"{((predicted_price - area_avg_price) / area_avg_price * 100):.1f}%" 
            )
            
            # Hi·ªán th·ªã kho·∫£ng gi√°
            st.caption(f"D·ª±a tr√™n {area_count} giao d·ªãch trong khu v·ª±c")
            st.write(f"Kho·∫£ng gi√°: {area_min_price:,.0f} - {area_max_price:,.0f} DKK")
            
            # ƒê√°nh gi√° m·ª©c gi√°
            if predicted_price < area_min_price:
                st.warning(f"‚ö†Ô∏è Gi√° d·ª± ƒëo√°n th·∫•p h∆°n m·ª©c th·∫•p nh·∫•t trong khu v·ª±c ({area_min_price:,.0f} DKK)")
            elif predicted_price > area_max_price:
                st.warning(f"‚ö†Ô∏è Gi√° d·ª± ƒëo√°n cao h∆°n m·ª©c cao nh·∫•t trong khu v·ª±c ({area_max_price:,.0f} DKK)")
            else:
                price_percentile = len(area_data[area_data['purchaseprice'] <= predicted_price]) / len(area_data) * 100
                st.info(f"‚úì Gi√° d·ª± ƒëo√°n n·∫±m ·ªü m·ª©c {price_percentile:.1f}% so v·ªõi c√°c giao d·ªãch trong khu v·ª±c")
        else:
            st.info("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu cho khu v·ª±c n√†y ƒë·ªÉ so s√°nh")
    
    with col2:
        # T√¨m gi√° trung b√¨nh c·ªßa nh√† t∆∞∆°ng t·ª±
        similar_houses = df[
            (df['house_type'] == house_type) & 
            (abs(df['sqm'] - area) <= 20) & 
            (abs(df['no_rooms'] - rooms) <= 1)
        ]
        
        if not similar_houses.empty and len(similar_houses) >= 5:
            similar_avg_price = similar_houses['purchaseprice'].mean()
            similar_count = len(similar_houses)
            
            st.metric(
                label=f"Gi√° trung b√¨nh nh√† t∆∞∆°ng t·ª±", 
                value=f"{similar_avg_price:,.0f} DKK",
                delta=f"{((predicted_price - similar_avg_price) / similar_avg_price * 100):.1f}%"
            )
            
            st.caption(f"D·ª±a tr√™n {similar_count} nh√† c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng t·ª±")
            
            # T√≠nh to√°n gi√° ƒë·ªÅ xu·∫•t
            suggested_price = None
            confidence = "Trung b√¨nh"
            
            if len(similar_houses) >= 20 and len(area_data) >= 20:
                # K·∫øt h·ª£p gi·ªØa d·ª± ƒëo√°n, nh√† t∆∞∆°ng t·ª± v√† gi√° khu v·ª±c
                suggested_price = predicted_price * 0.5 + similar_avg_price * 0.3 + area_avg_price * 0.2
                confidence = "Cao"
            elif len(similar_houses) >= 10:
                # K·∫øt h·ª£p gi·ªØa d·ª± ƒëo√°n v√† nh√† t∆∞∆°ng t·ª±
                suggested_price = predicted_price * 0.6 + similar_avg_price * 0.4
                confidence = "Kh√° cao"
            else:
                # Ch·ªß y·∫øu d·ª±a v√†o d·ª± ƒëo√°n
                suggested_price = predicted_price * 0.8 + similar_avg_price * 0.2
            
            # Hi·ªÉn th·ªã kho·∫£ng gi√° ƒë·ªÅ xu·∫•t (¬±5%)
            st.write("### G·ª£i √Ω gi√° b√°n:")
            min_suggested = suggested_price * 0.95
            max_suggested = suggested_price * 1.05
            
            st.success(f"üí∞ {min_suggested:,.0f} - {max_suggested:,.0f} DKK")
            st.caption(f"ƒê·ªô tin c·∫≠y: {confidence}")
        else:
            st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu v·ªÅ nh√† c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng t·ª± ƒë·ªÉ so s√°nh")
    
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh
    if 'area_avg_price' in locals() and 'similar_avg_price' in locals():
        st.subheader("So s√°nh gi√°")
        comparison_data = {
            'Lo·∫°i': ['Gi√° d·ª± ƒëo√°n', 'Trung b√¨nh khu v·ª±c', 'Nh√† t∆∞∆°ng t·ª±'],
            'Gi√° (DKK)': [predicted_price, area_avg_price, similar_avg_price]
        }
        
        if 'suggested_price' in locals():
            comparison_data['Lo·∫°i'].append('Gi√° ƒë·ªÅ xu·∫•t')
            comparison_data['Gi√° (DKK)'].append(suggested_price)
        
        comparison_df = pd.DataFrame(comparison_data)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        bars = sns.barplot(x='Lo·∫°i', y='Gi√° (DKK)', data=comparison_df, palette='viridis', ax=ax)
        
        # Th√™m gi√° tr·ªã l√™n c√°c thanh
        for i, bar in enumerate(bars.patches):
            bars.annotate(f'{comparison_df["Gi√° (DKK)"][i]:,.0f}',
                         (bar.get_x() + bar.get_width()/2, bar.get_height()), 
                         ha='center', va='bottom', fontsize=8, rotation=0)
        
        plt.title('So s√°nh c√°c m·ª©c gi√°')
        plt.xticks(rotation=15)
        plt.tight_layout()
        st.pyplot(fig)

with tab2:
    st.write("### Chi ti·∫øt ƒë√°nh gi√°")
    
    # T·∫°o b·∫£ng ƒë√°nh gi√° chi ti·∫øt
    eval_data = []
    
    # ƒê√°nh gi√° di·ªán t√≠ch
    area_percentile = np.percentile(df['area'], [25, 50, 75])
    if area <= area_percentile[0]:
        area_eval = ("Nh·ªè", "Di·ªán t√≠ch nh·ªè h∆°n 25% c√°c b·∫•t ƒë·ªông s·∫£n")
    elif area <= area_percentile[1]:
        area_eval = ("Trung b√¨nh th·∫•p", "Di·ªán t√≠ch n·∫±m gi·ªØa 25-50% c√°c b·∫•t ƒë·ªông s·∫£n")
    elif area <= area_percentile[2]:
        area_eval = ("Trung b√¨nh cao", "Di·ªán t√≠ch n·∫±m gi·ªØa 50-75% c√°c b·∫•t ƒë·ªông s·∫£n")
    else:
        area_eval = ("L·ªõn", "Di·ªán t√≠ch l·ªõn h∆°n 75% c√°c b·∫•t ƒë·ªông s·∫£n")
    
    eval_data.append(["Di·ªán t√≠ch", f"{area} m¬≤", area_eval[0], area_eval[1]])
    
    # ƒê√°nh gi√° s·ªë ph√≤ng
    room_counts = df['no_rooms'].value_counts()
    if rooms in room_counts.index:
        room_pct = room_counts[rooms] / room_counts.sum() * 100
        room_eval = (f"Ph·ªï bi·∫øn ({room_pct:.1f}%)", f"{room_pct:.1f}% c√°c b·∫•t ƒë·ªông s·∫£n c√≥ {rooms} ph√≤ng")
    else:
        room_eval = ("Kh√¥ng ph·ªï bi·∫øn", f"R·∫•t √≠t b·∫•t ƒë·ªông s·∫£n c√≥ {rooms} ph√≤ng")
    
    eval_data.append(["S·ªë ph√≤ng", f"{rooms}", room_eval[0], room_eval[1]])
    
    # ƒê√°nh gi√° khu v·ª±c (zipcode)
    zipcode_counts = df['zipcode'].value_counts()
    if zipcode in zipcode_counts.index:
        zipcode_pct = zipcode_counts[zipcode] / zipcode_counts.sum() * 100
        zipcode_eval = (f"C√≥ d·ªØ li·ªáu ({zipcode_pct:.1f}%)", f"{zipcode_counts[zipcode]} giao d·ªãch ({zipcode_pct:.1f}%)")
    else:
        zipcode_eval = ("Thi·∫øu d·ªØ li·ªáu", "Kh√¥ng c√≥ giao d·ªãch trong khu v·ª±c n√†y")
    
    eval_data.append(["M√£ khu v·ª±c", f"{zipcode}", zipcode_eval[0], zipcode_eval[1]])
    
    # ƒê√°nh gi√° lo·∫°i nh√†
    house_type_counts = df['house_type'].value_counts()
    if house_type in house_type_counts.index:
        house_type_pct = house_type_counts[house_type] / house_type_counts.sum() * 100
        house_eval = (f"Ph·ªï bi·∫øn ({house_type_pct:.1f}%)", f"{house_type_pct:.1f}% l√† lo·∫°i nh√† n√†y")
    else:
        house_eval = ("Kh√¥ng ph·ªï bi·∫øn", "R·∫•t √≠t d·ªØ li·ªáu v·ªÅ lo·∫°i nh√† n√†y")
    
    eval_data.append(["Lo·∫°i nh√†", f"{house_type}", house_eval[0], house_eval[1]])
    
    # ƒê√°nh gi√° nƒÉm x√¢y d·ª±ng
    year_percentile = np.percentile(df['year_build'], [25, 50, 75])
    if year_build <= year_percentile[0]:
        year_eval = ("C≈©", "Thu·ªôc 25% c√°c b·∫•t ƒë·ªông s·∫£n c≈© nh·∫•t")
    elif year_build <= year_percentile[1]:
        year_eval = ("Trung b√¨nh c≈©", "Thu·ªôc 25-50% c√°c b·∫•t ƒë·ªông s·∫£n theo ƒë·ªô tu·ªïi")
    elif year_build <= year_percentile[2]:
        year_eval = ("Trung b√¨nh m·ªõi", "Thu·ªôc 50-75% c√°c b·∫•t ƒë·ªông s·∫£n theo ƒë·ªô tu·ªïi")
    else:
        year_eval = ("M·ªõi", "Thu·ªôc 25% c√°c b·∫•t ƒë·ªông s·∫£n m·ªõi nh·∫•t")
    
    eval_data.append(["NƒÉm x√¢y d·ª±ng", f"{year_build}", year_eval[0], year_eval[1]])
    
    # Hi·ªÉn th·ªã b·∫£ng ƒë√°nh gi√°
    eval_df = pd.DataFrame(eval_data, columns=["Th√¥ng s·ªë", "Gi√° tr·ªã", "ƒê√°nh gi√°", "Chi ti·∫øt"])
    st.table(eval_df)
    
    # T√≠nh ƒëi·ªÉm ƒë·ªô tin c·∫≠y c·ªßa d·ª± ƒëo√°n
    reliability_score = 0
    max_score = 5  # T·ªïng ƒëi·ªÉm t·ªëi ƒëa
    
    # ƒêi·ªÉm cho d·ªØ li·ªáu khu v·ª±c
    if 'area_data' in locals() and len(area_data) >= 20:
        reliability_score += 1
    elif 'area_data' in locals() and len(area_data) >= 5:
        reliability_score += 0.5
    
    # ƒêi·ªÉm cho d·ªØ li·ªáu nh√† t∆∞∆°ng t·ª±
    if 'similar_houses' in locals() and len(similar_houses) >= 20:
        reliability_score += 1
    elif 'similar_houses' in locals() and len(similar_houses) >= 5:
        reliability_score += 0.5
    
    # ƒêi·ªÉm cho tham s·ªë di·ªán t√≠ch
    if area_percentile[0] <= area <= area_percentile[2]:
        reliability_score += 1  # Di·ªán t√≠ch trong kho·∫£ng ph·ªï bi·∫øn
    
    # ƒêi·ªÉm cho s·ªë ph√≤ng
    common_rooms = room_counts.nlargest(3).index.tolist()
    if rooms in common_rooms:
        reliability_score += 1  # S·ªë ph√≤ng ph·ªï bi·∫øn
    
    # ƒêi·ªÉm cho nƒÉm x√¢y d·ª±ng
    current_year = pd.Timestamp.now().year
    if 1950 <= year_build <= current_year:
        reliability_score += 1  # NƒÉm x√¢y d·ª±ng h·ª£p l√Ω
    
    # Hi·ªÉn th·ªã ƒëi·ªÉm ƒë·ªô tin c·∫≠y
    reliability_percentage = (reliability_score / max_score) * 100
    st.subheader("ƒê·ªô tin c·∫≠y c·ªßa d·ª± ƒëo√°n")
    st.progress(reliability_score / max_score)
    
    if reliability_percentage >= 80:
        st.success(f"‚úÖ ƒê·ªô tin c·∫≠y cao: {reliability_percentage:.0f}%")
    elif reliability_percentage >= 50:
        st.warning(f"‚ö†Ô∏è ƒê·ªô tin c·∫≠y trung b√¨nh: {reliability_percentage:.0f}%")
    else:
        st.error(f"‚ùå ƒê·ªô tin c·∫≠y th·∫•p: {reliability_percentage:.0f}%")
    
    # L√Ω do ƒë√°nh gi√° ƒë·ªô tin c·∫≠y
    st.write("**C√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô tin c·∫≠y:**")
    reasons = []
    
    if 'area_data' in locals():
        reasons.append(f"- S·ªë giao d·ªãch trong khu v·ª±c: {len(area_data)}")
    else:
        reasons.append("- Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch trong khu v·ª±c")
    
    if 'similar_houses' in locals():
        reasons.append(f"- S·ªë nh√† c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng t·ª±: {len(similar_houses)}")
    else:
        reasons.append("- Kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ nh√† c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng t·ª±")
    
    if area_percentile[0] <= area <= area_percentile[2]:
        reasons.append("- Di·ªán t√≠ch n·∫±m trong kho·∫£ng ph·ªï bi·∫øn")
    else:
        reasons.append("- Di·ªán t√≠ch n·∫±m ngo√†i kho·∫£ng ph·ªï bi·∫øn")
    
    if rooms in common_rooms:
        reasons.append(f"- S·ªë ph√≤ng ({rooms}) l√† ph·ªï bi·∫øn")
    else:
        reasons.append(f"- S·ªë ph√≤ng ({rooms}) kh√¥ng ph·ªï bi·∫øn")
    
    for reason in reasons:
        st.write(reason)

# --- Bi·ªÉu ƒë·ªì EDA ---
st.subheader("Ph√¢n t√≠ch d·ªØ li·ªáu (EDA)")

with st.expander("Heatmap T∆∞∆°ng Quan"):
    corr = df.corr(numeric_only=True)

    # Ki·ªÉm tra n·∫øu c√≥ c·ªôt 'purchaseprice'
    if 'purchaseprice' in corr.columns:
        # L·∫•y top 10 bi·∫øn t∆∞∆°ng quan m·∫°nh nh·∫•t v·ªõi 'purchaseprice'
        top_corr = corr['purchaseprice'].abs().sort_values(ascending=False)[1:11].index
        selected_corr = corr.loc[top_corr, top_corr]
    else:
        # fallback: d√πng to√†n b·ªô n·∫øu kh√¥ng c√≥ c·ªôt 'purchaseprice'
        selected_corr = corr

    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(selected_corr, annot=True, cmap="coolwarm", linewidths=0.5, square=True, fmt=".2f")
    ax.set_title("Heatmap c√°c bi·∫øn t∆∞∆°ng quan")
    st.pyplot(fig)

with st.expander("Bi·ªÉu ƒë·ªì ph√¢n b·ªë di·ªán t√≠ch"):
    fig2, ax2 = plt.subplots()
    sns.histplot(df['area'], bins=30, kde=True, ax=ax2)
    st.pyplot(fig2)

with st.expander("Ph√¢n t√≠ch gi√° theo khu v·ª±c"):
    # T√≠nh gi√° trung b√¨nh v√† s·ªë l∆∞·ª£ng giao d·ªãch theo zipcode
    price_analysis = df.groupby('zipcode').agg({
        'purchaseprice': ['mean', 'count']
    }).round(2)
    
    # ƒê·∫∑t t√™n c·ªôt
    price_analysis.columns = ['Gi√° trung b√¨nh', 'S·ªë giao d·ªãch']
    
    # Hi·ªÉn th·ªã b·∫£ng v√† bi·ªÉu ƒë·ªì
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("B·∫£ng ph√¢n t√≠ch theo khu v·ª±c:")
        st.dataframe(price_analysis)
    
    with col2:
        st.write("Bi·ªÉu ƒë·ªì gi√° trung b√¨nh theo khu v·ª±c:")
        st.line_chart(price_analysis['Gi√° trung b√¨nh'])

# --- User Guide ---
st.sidebar.markdown("---")
st.sidebar.markdown(" **H∆∞·ªõng d·∫´n:** Nh·∫≠p th√¥ng tin ·ªü tr√™n ƒë·ªÉ d·ª± ƒëo√°n gi√° nh√†. Xem bi·ªÉu ƒë·ªì v√† ph√¢n t√≠ch b√™n d∆∞·ªõi.")
